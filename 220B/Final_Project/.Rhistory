int_corr <- ggarrange(all_corr,p1,p2,p3, nrow = 2, ncol = 2)
annotate_figure(int_corr, top =text_grob ("Correlations Between Survey Measures", face = "bold", size = 14))
fit1 <- glm(pc ~ ., family = 'poisson', data = pharmacy_data)
summary(fit1)
#check phi for over dispersion
rp <- residuals(fit1,type = 'pearson') #phi tilde numerator
phi_hat <- fit1$deviance/fit1$df.residual
phi_tilde <- sum(rp^2)/fit1$df.residual
fit1.phi <- as.data.frame(cbind('hat'=phi_hat,'tilde'=phi_tilde))
fit1.phi
#check for overdispersion using residuals
fv <- fitted(fit1)
par(mfrow = c(1,2))
plot(log(fv), rp, xlab = expression(log(hat(mu))),
ylab = "Pearson Resids")
plot(log(fv), log(residuals(fit1, type = 'response')^2), xlab = expression(log(hat(mu))),
ylab = expression(log(y - hat(mu))^2))
abline(0,1)
library(MASS)
fit2 <- stepAIC(fit1, direction = 'both',trace =F)
summary(fit2)
anova(fit1,fit2, test = 'Chi')
pharmacy_data$sex <- factor(pharmacy_data$sex, labels = c('M','F'))
pharmacy_data$lp <- factor(pharmacy_data$lp, labels = c('uncovered','covered'))
pharmacy_data$fp <- factor(pharmacy_data$fp, labels = c('nonprivatePharm','privatePharm'))
pharmacy_data$fr <- factor(pharmacy_data$fr, labels = c('nonprivate','private'))
pharmacy_data$ch1 <- factor(pharmacy_data$ch1, labels = c('nonChronic1','chronicNoLim'))
pharmacy_data$ch2 <- factor(pharmacy_data$ch2, labels = c('nonChronic2','chronicLim'))
fit3 <- glm(pc ~ ., data = pharmacy_data, family = 'poisson')
summary(fit3)
fit3.2 <- stepAIC(fit3, direction = 'both',trace = F)
summary(fit3.2)
anova(fit2,fit3.2, test = 'Chisq')
fit4 <- stepAIC(fit1, ~ .^2, direction = 'both', trace = F)
summary(fit4)
anova(fit2,fit4, test = 'Chi')
rp <- residuals(fit4,type = 'pearson') #phi tilde numerator
phi_hat <- fit4$deviance/fit4$df.residual
phi_tilde <- sum(rp^2)/fit4$df.residual
fit4.phi <- as.data.frame(cbind('hat'=phi_hat,'tilde'=phi_tilde))
fit4.phi
#check for overdispersion using residuals
fv <- fitted(fit4)
par(mfrow = c(1,2))
plot(log(fv), rp, xlab = expression(log(hat(mu))),
ylab = "Pearson Resids")
plot(log(fv), log(residuals(fit4, type = 'response')^2), xlab = expression(log(hat(mu))),
ylab = expression(log(y - hat(mu))^2))
abline(0,1)
library(boot)
glm.diag.plots(fit4)
fit4.partials <- residuals(fit4,type = 'partial')
f <- sapply(pharmacy_data, is.factor)
#par(mfrow = c(5,4))
for (iCol in colnames(pharmacy_data)){
col_pos <- match(iCol, colnames(fit4.partials))
if (is.na(col_pos)){
next
}
if (f[iCol]){
boxplot(pharmacy_data[,iCol], fit4.partials[,col_pos], ylab='partials', names=levels(pharmacy_data[,iCol]), xlab = iCol)
} else {
plot(pharmacy_data[,iCol],fit4.partials[,col_pos], ylab='partials', xlab = iCol)
#lines(smooth.spline(pharmacy_data[,iCol],fit4.partials[,iCol]), col = 'red', tol = 10000, lwd = 2,
#lty = 2)
}
}
plot(exp(fv), pharmacy_data[,'pc'], ylab = 'pc', xlab = 'exp(fitted values)')
lines(smooth.spline(exp(fv),pharmacy_data[,'pc']), col = 'red', lwd = 2)
#identify(exp(fv), pharmacy_data[,'pc'], labels = name)
library(glmnet)
x <- model.matrix(fit4, data = pharmacy_data)
x
glmnet(x,y,family='poisson', alpha = 1)
y <- pharmacy_data$pc
library(glmnet)
y <- pharmacy_data$pc
x <- model.matrix(fit4, data = pharmacy_data)
glmnet(x,y,family='poisson', alpha = 1)
lassMod <- glmnet(x,y,family='poisson', alpha = 1)
plot(lassoMod, label = T, xvar = "lambda")
rm(lassMod)
lassoMod <- glmnet(x,y,family='poisson', alpha = 1)
plot(lassoMod, label = T, xvar = "lambda")
rm(x)
X <- model.matrix(fit4, data = pharmacy_data)[,-1]
lassoMod <- glmnet(x,y,family='poisson', alpha = 1)
lassoMod <- glmnet(X,y,family='poisson', alpha = 1)
plot(lassoMod, label = T, xvar = "lambda")
library(glmnet)
y <- pharmacy_data$pc
X <- model.matrix(fit4, data = pharmacy_data)[,-1]
lassoMod <- glmnet(X,y,family='poisson', alpha = 1, lambda.min=0, nlambda=101)
plot(lassoMod, label = T, xvar = "lambda")
fit.lasso.cv <- cv.glmnet(X, y, lambda.min=0, nlambda=101)
plot(fit.lasso.cv)
plot(lassoMod, label = T, xvar = "lambda")
mtext("CV estimate", side=1, at=log(lassoMod$lambda.min), cex=.8)
lassoMod$lambda
lassoMod$lambda.min
library(glmnet)
y <- pharmacy_data$pc
X <- model.matrix(fit4, data = pharmacy_data)[,-1]
lassoMod <- glmnet(X,y,family='poisson', alpha = 1, lambda.min=0, nlambda=101)
plot(lassoMod, label = T, xvar = "lambda")
mtext("CV estimate", side=1, at=log(lassoMod$lambda.min), cex=.8)
plot(lassoMod, label = T, xvar = "lambda")
text(-5.5,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
plot(lassoMod, label = T, xvar = "lambda")
text(-9,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
plot(lassoMod, label = T, xvar = "lambda")
text(-9,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(lassoMod$lambda.min), cex=.8)
plot(lassoMod, label = T, xvar = "lambda")
text(-9,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
plot(lassoMod, label = T, xvar = "lambda")
text(-4,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
plot(lassoMod, label = T, xvar = "lambda")
text(-10,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
plot(lassoMod, label = T, xvar = "lambda")
text(-10,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
abline(h = 0, lty = 2, col = 'black')
View(lassoMod)
lassoMod$beta
lassoMod$beta[i]
lassoMod$beta['i']
lassoMod$beta$i
lassoMod$beta[1]
lassoMod[["beta"]]@i
lassoMod[["beta"]]@p
plot(lassoMod, label=T, xvar = 'dev')
library(glmnet)
y <- pharmacy_data$pc
X <- model.matrix(fit4, data = pharmacy_data)[,-1]
lassoMod <- glmnet(X,y,family='poisson', alpha = 1, lambda.min=0, nlambda=101)
fit.lasso.cv <- cv.glmnet(X, y, lambda.min=0, nlambda=101)
plot(fit.lasso.cv)
plot(lassoMod, label = T, xvar = "lambda")
text(-10,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
abline(h = 0, lty = 2, col = 'black')
y <- pharmacy_data$pc
X <- model.matrix(fit4, data = pharmacy_data)[,-1]
lassoMod <- glmnet(X,y,family='poisson', alpha = 1, lambda.min=0, nlambda=101)
fit.lasso.cv <- cv.glmnet(X, y, lambda.min=0, nlambda=101)
plot(fit.lasso.cv)
plot(lassoMod, label = T, xvar = "lambda")
text(-10,coef(lassoMod)[-1,length(lassoMod$lambda)]-0.05,labels=colnames(X),cex=1.1)
mtext("CV estimate", side=1, at=log(fit.lasso.cv$lambda.min), cex=.8)
abline(v=log(fit.lasso.cv$lambda.min), col="red")
abline(h = 0, lty = 2, col = 'black')
fit.lasso.cv <- cv.glmnet(X, y, lambda.min=0, nlambda=101, nfolds = nrow(pharmacy_data))
plot(fit.lasso.cv)
predict(fit.lasso.cv, type = "coefficients", s = fit.lasso.cv$lambda.1se)
summary(lassoMod)
summary(fit.lasso.cv)
coef(lassoMod, s = "lamda.min")
coef(lassoMod, s = "lambda.min")
coef(fit.lasso.cv, s = "lambda.min")
tmp_coeffs <- coef(fit.lasso.cv, s = "lambda.min")
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
fit5cv <- glm(pc ~ sex*age + ad * hs, data = pharmacy_data, family = 'poisson')
summary(fit5cv)
anova(fit4, fit5cv, test = 'Chi')
anova(fit4, fit5cv, test = 'Cp')
BIC(fit4)
BIC(fit5cv)
BIC(fit1)
BIC(fit3)
BIC(fit3.2)
AIC(fit3.2)
AIC(fit4)
summary(fit3.2)
fit1$deviance
#useful functions
# p-value for overall model fit
calcPval <- function(x){
fstat <- summary(x)$fstatistic
pVal <- pf(fstat[1], fstat[2], fstat[3], lower.tail = FALSE)
return(pVal)
}
compute_PhiTil <- function(x){
pear_resid <- residuals(x,type='pearson')
tilde <- sum(pear_resid^2)/x$df.residual
}
compute_PhiHat <- function(x){
hat <- x$deviance/x$df.residual
}
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(final_models.list,AIC))
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list), compute_PhiTil),
"Phi_Hat" = unlist(lapply(models.list), compute_PhiHat))
summary(fit1)
anova.glm(fit1)
anova(fit1)
anova(fit1, test = 'F')
anova(fit1,test='Chi')
#useful functions
null.model <- glm(pc ~ -1, data = pharmacy_data, family='poisson')
summary(null.model)
#useful functions
null.model <- glm(pc ~ 1, data = pharmacy_data, family='poisson')
summary(null.model)
anova(null.model,fit1)
anova(null.model,fit1, test = 'Chi')
foo <- anova(null.model,fit1, test = 'Chi')
foo$`Pr(>Chi)`
foo$`Pr(>Chi)`[2]
round(foo$`Pr(>Chi)`,3)
round(foo$`Pr(>Chi)`[2],3)
round(foo$`Pr(>Chi)`[2],10000)
round(foo$`Pr(>Chi)`[2],100)
round(foo$`Pr(>Chi)`[2],10)
formatC(foo$`Pr(>Chi)`, format = 'e', digits = 2)
formatC(foo$`Pr(>Chi)`[2], format = 'e', digits = 2)
#useful functions
null.model <- glm(pc ~ 1, data = pharmacy_data, family='poisson')
# p-value for overall model fit
calcPval <- function(null,x){
compare.null <- anova(null,x, test = 'Chi')
pVal_raw <- compare.null$`Pr(>Chi)`[2]
pVal <- formatC(pVal_raw, format = 'e', digits = 2)
return(pVal)
}
compute_PhiTil <- function(x){
pear_resid <- residuals(x,type='pearson')
tilde <- sum(pear_resid^2)/x$df.residual
}
compute_PhiHat <- function(x){
hat <- x$deviance/x$df.residual
}
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list), compute_PhiTil),
"Phi_Hat" = unlist(lapply(models.list), compute_PhiHat))
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(null.model,models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list), compute_PhiTil),
"Phi_Hat" = unlist(lapply(models.list), compute_PhiHat))
unlist(lapply(models.list), compute_PhiTil)
unlist(lapply(models.list), compute_PhiTil)
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(null.model,models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list), compute_PhiHat))
unlist(lapply(models.list, compute_PhiTil))
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(null.model,models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat))
model.performance.sumr
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(null.model,models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
unlist(lapply(models.list, compute_PhiHat))
unlist(lapply(models.list, compute_PhiTil))
unlist(lapply(null.model,models.list, calcPval))
lapply(null.model,models.list,calcPval)
unlist(lapply(null.model, calcPval, arg2 = models.list))
unlist(lapply(null.model, calcPval, arg1 = models.list))
unlist(lapply(null.model, calcPval,models.list))
lapply(models.list,function(x) anova(null.model,x,test ='F'))
lapply(models.list,function(x) anova(null.model,x,test ='Chi'))
lapply(null.model,calcPval,fit1)
lapply(null.model,calcPval,x-fit1)
lapply(null.model,calcPval,x=fit1)
lapply(null.model,calcPval,x=models.list)
sapply(null.model,calcPval,x=models.list)
#useful functions
null.model <- glm(pc ~ 1, data = pharmacy_data, family='poisson')
# p-value for overall model fit
calcPval <- function(x){
compare.null <- anova(null.model,x, test = 'Chi')
pVal_raw <- compare.null$`Pr(>Chi)`[2]
pVal <- formatC(pVal_raw, format = 'e', digits = 2)
return(pVal)
}
compute_PhiTil <- function(x){
pear_resid <- residuals(x,type='pearson')
tilde <- sum(pear_resid^2)/x$df.residual
}
compute_PhiHat <- function(x){
hat <- x$deviance/x$df.residual
}
models.list <- list(fit1,fit2,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr
models.list <- list(fit1,fit3,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr
formulat(fit1)
formula(fit1)
formulat(fit2)
formula(fit2)
formula(fit3)
formula(fit3.2)
models.list <- list(fit1,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr
?order
model.performance.sumr[order(model.performance.sumr$BIC, order=-1)]
model.performance.sumr[order(model.performance.sumr$BIC, order=-1),]
order(model.performance.sumr$BIC)
order(model.performance.sumr$BIC, order = -1)
order(model.performance.sumr$BIC, -1)
model.performance.sumr[order(-model.performance.sumr$BIC,),]
model.performance.sumr[order(-model.performance.sumr$BIC),]
model.performance.sumr[order(-model.performance.sumr$BIC),]
model.performance.sumr
model.performance.sumr[order(model.performance.sumr$BIC),]
model.performance.sumr[order(-model.performance.sumr$BIC),]
model.performance.sumr[order(model.performance.sumr$BIC),]
model.performance.sumr[order(model.performance.sumr$BIC),]
model.performance.sumr <- model.performance.sumr[order(model.performance.sumr$BIC),]
model.performance.sumr
model.performance.sumr
View(model.performance.sumr)
View(model.performance.sumr)
#useful functions
null.model <- glm(pc ~ 1, data = pharmacy_data, family='poisson')
# p-value for overall model fit
calcPval <- function(x){
compare.null <- anova(null.model,x, test = 'Chi')
pVal_raw <- compare.null$`Pr(>Chi)`[2]
pVal <- formatC(pVal_raw, format = 'e', digits = 2)
return(pVal)
}
compute_PhiTil <- function(x){
pear_resid <- residuals(x,type='pearson')
tilde <- sum(pear_resid^2)/x$df.residual
return(tilde)
}
compute_PhiHat <- function(x){
hat <- x$deviance/x$df.residual
return(hat)
}
models.list <- list(fit1,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr <- model.performance.sumr[order(model.performance.sumr$BIC),]
View(model.performance.sumr)
View(model.performance.sumr)
toString(fit1)
View(fit1)
names(models.list)
deparse(substitue(fit1))
deparse(substitute(fit1))
models.list <- list(fit1,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Model_Num" = lapply(model.list, function(x) deparse(substitute(x))),
"Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
models.list <- list(fit1,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Model_Num" = lapply(models.list, function(x) deparse(substitute(x))),
"Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr <- model.performance.sumr[order(model.performance.sumr$BIC),]
View(model.performance.sumr)
deparse(substitute(models.list))
sapply(models.list,function(x) deparse(substitute(x)))
toString(models.list)
#useful functions
null.model <- glm(pc ~ 1, data = pharmacy_data, family='poisson')
# p-value for overall model fit
calcPval <- function(x){
compare.null <- anova(null.model,x, test = 'Chi')
pVal_raw <- compare.null$`Pr(>Chi)`[2]
pVal <- formatC(pVal_raw, format = 'e', digits = 2)
return(pVal)
}
compute_PhiTil <- function(x){
pear_resid <- residuals(x,type='pearson')
tilde <- sum(pear_resid^2)/x$df.residual
return(tilde)
}
compute_PhiHat <- function(x){
hat <- x$deviance/x$df.residual
return(hat)
}
extract_modNum <- function(list_mods){
nums <- list()
for (i in 1:length(list_mods)){
nums[i] <- deparse(substitute(list_mods[i]))
}
return(nums)
}
extract_modNum(models.list)
substitute(fit1)
substitute(models.list[1])
models.list
deparse(fit1)
names(models.list)
c(1:length(models.list))
length(models.list)
models.list <- list(fit1,fit3.2,fit4,fit5cv)
models.AIC <- unlist(lapply(models.list,AIC))
models.BIC <- unlist(lapply(models.list,BIC))
model.performance.sumr <- data.frame("Model_Num" = c(1:length(models.list)),
"Formula"=unlist(lapply(models.list,function(x)
Reduce(paste,deparse(formula(x))))),
"Deviance"=unlist(lapply(models.list,function(x)
summary(x)$deviance)),
"pF"=unlist(lapply(models.list, calcPval)),
"AIC" = models.AIC,"BIC"=models.BIC,
"Phi_Tild" = unlist(lapply(models.list, compute_PhiTil)),
"Phi_Hat" = unlist(lapply(models.list, compute_PhiHat)))
model.performance.sumr <- model.performance.sumr[order(model.performance.sumr$BIC),]
View(model.performance.sumr)
